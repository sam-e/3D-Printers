
#____ CONFIGURATION VARIABLES ______________________________________#
[gcode_macro ECHO_MACRO_VARS]
description: Echo Klipper variables to the console.
gcode:
  {% for var, value in printer["gcode_macro VZeroVAR"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}
  
[gcode_macro VZeroVAR]
description: Klipper variable storage macro, will echo variables to the console when run.
# Configuration Defaults
# This is only here to make the config backwards compatible.
# Configuration should exclusively happen in printer.cfg.
variable_relative_extrusion: False
variable_preheat_extruder: True
variable_preheat_bed: True
variable_calibrate_bed_mesh: True
variable_nozzle_priming: "primeblob"
variable_start_print_park_in: "back"
variable_start_print_park_z_height: 50
variable_end_print_park_in: "back"
variable_pause_print_park_in: "back"
variable_macro_travel_speed: 150
gcode:
  ECHO_MACRO_VARS
#___________________________________________________________________#



#____ GENERAL MACROS _______________________________________________#
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
  # Parameters
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  #{% set bedtemp = params.BED|int %}
  #{% set hotendtemp = params.EXTRUDER|int %}
  #{% set chambertemp = params.CHAMBER|default(0)|int %}

  # Homes the printer and sets absolute positioning
  #M117
  #M117 Homing...    ; display message
  #SET_DISPLAY_TEXT MSG="Homing"
  MAYBE_HOME  # Home if needed
  G90         # Absolut position

  # Checks if the bed temp is higher than 90c - if so then trigger a heatsoak
  {% if params.BED|int > 90 %}
    M106 S255                                           # Turns on the PT-fan
  
    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turns on the nevermore
  
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Goes to center of the bed
    #M117 Heating Bed... ;                               # display message
    SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}c"
    M190 S{target_bed}                                  # Sets target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Displays info
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber to reach desired temp

  # If the bed temp is not over 90c then it skips the heatsoak and just heats up to set temp with a 5min soak.
  {% else %}
    G1 X{x_wait} Y{y_wait} Z15 F9000                # Goes to center of the bed
    #M117 Heating Bed... ;                           # display message
    SET_DISPLAY_TEXT MSG="Heating Bed: {target_bed}c"
    M190 S{target_bed}                              # Sets target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5min"                # Displays info
    G4 P300000                                      # Waits 5 min for the bedtemp to stabilize
  {% endif %}

  # Heats up the nozzle up to target via slicer
  M107                                              # Turns off the PT-fan
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  M109 S{target_extruder}                           # Heats the nozzle to your print temp

  # Create a purge line and starts the print
  G1 X5 Y4 Z0.4 F10000                             # Moves to starting point
  G1 X115 E20 F1000                                # Purge line


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
  # safe anti-stringing move coords
  {% set th = printer.toolhead %}
  {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
  {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
  {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
  SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
  M400             ; wait for buffer to clear
  G92 E0           ; zero the extruder
  G1 E-15.0 F1800  ; retract filament
    
  TURN_OFF_HEATERS
    
  G90                                      ; absolute positioning
  G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
  G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
  M107                                     ; turn off fan
    
  #BED_MESH_CLEAR
  RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE


[gcode_macro CLEAN_NOZZLE]
gcode:
	#Move the toolhead to the middle of the bed
    G1 X150 Y0 Z75 F6000


[gcode_macro _Preheat_Extruder]
gcode:
  {% if printer["gcode_macro VZeroVAR"].preheat_extruder|lower == 'true' %}
    M117 Pre-heating extruder...
    RESPOND MSG="Pre-heating extruder..."
    # Wait for extruder to reach 150 so an inductive probe (if present) is at a predictable temp. 
    # Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
    M104 S150
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=150 MAXIMUM=155
  {% endif %}


[gcode_macro _Preheat_Bed]
gcode:
  {% if printer["gcode_macro VZeroVAR"].preheat_bed|lower == 'true' %}
    M117 Pre-heating bed...
    RESPOND MSG="Pre-heating bed..."
    M190 S60 
  {% endif %}


[pause_resume]
# over written in next macro

[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  {% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}


[gcode_macro PAUSE]
description: Pauses the printer
rename_existing: PAUSE_BASE
variable_extrude: 1.5
gcode:
  SAVE_GCODE_STATE NAME=PAUSE_state
  # Define park positions 
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set speed = printer["gcode_macro VZeroVAR"].macro_travel_speed|float * 60 %}
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  PAUSE_BASE
  G91
  # Retract
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  # Move to park position
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    _PARK LOCATION={printer["gcode_macro VZeroVAR"].pause_print_park_in} X={printer["gcode_macro VZeroVAR"].pause_print_park_x}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

  
[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
  SAVE_GCODE_STATE NAME=prime_blob_state
  M117 Priming nozzle with prime blob..
  RESPOND MSG="Priming nozzle with prime blob.."
  {% set speed = printer["gcode_macro VZeroVAR"].macro_travel_speed|float * 60 %}
  # Absolute positioning
  G90 
  # Relative extrusion
  M83
  # Lift 5 mm
  G1 Z5 F3000
  # move to blob position
  G1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F{speed}
  # Extrude a blob
  G1 F60 E20
  # 40% fan
  M106 S102 
  # Move the extruder up by 5mm while extruding, breaks away from blob
  G1 Z5 F100 E5  
  # Move to wipe position, but keep extruding so the wipe is attached to blob
  G1 F200 Y{printer.toolhead.axis_minimum.y + 25} E1 
  # Go down diagonally while extruding
  # Broken down in z moves under 2mm as a workaround for a tuning tower test.
  # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
  G1 F200 Y{printer.toolhead.axis_minimum.y + 30} Z3.8 E0.5
  G1 F200 Y{printer.toolhead.axis_minimum.y + 35} Z2.6 E0.5
  G1 F200 Y{printer.toolhead.axis_minimum.y + 40} Z1.4 E0.5
  G1 F200 Y{printer.toolhead.axis_minimum.y + 45} Z0.2 E0.5
  # 0% fan
  M106 S0
  # small wipe line
  G1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.2 E0.6 
  # Break away wipe
  G1 F{speed} Y{printer.toolhead.axis_minimum.y + 100}
  RESTORE_GCODE_STATE NAME=prime_blob_state


[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
  SAVE_GCODE_STATE NAME=prime_line_state
  {% set speed = printer["gcode_macro VZeroVAR"].macro_travel_speed|float * 60 %}
  # Absolute positioning
  G90 
  # Absolute extrusion
  M82
  M117 Priming nozzle with prime line..
  RESPOND MSG="Priming nozzle with prime line.."
  # Lift 5 mm
  G1 Z5 F3000
  # Move to prime area
  G1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} F{speed}
  # Get ready to prime
  G1 Z0.3 F3000
  # Reset extrusion distance
  G92 E0
  # Prime nozzle 
  G1 Y{printer.toolhead.axis_minimum.y + 80} E16 F1200
  # Wipe
  G1 Y{printer.toolhead.axis_minimum.y + 100} F{speed}
  RESTORE_GCODE_STATE NAME=prime_line_state
#___________________________________________________________________#
#___________________________________________________________________#